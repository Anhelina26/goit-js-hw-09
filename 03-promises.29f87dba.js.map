{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAASC,SAASC,cAAc,SAoCtC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEpBC,YAAW,WACvBH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IA5CPL,EAAOa,iBAAiBC,UAAUC,IAAI,OAEtCf,EAAOgB,iBAAiB,UAExB,SAA2BC,GACzBA,EAAMC,iBAIN,IAFA,IAAgCC,EAiBlC,SAA0BF,GAOxB,MANmB,CACjBZ,MAAOe,OAAOH,EAAMI,cAAcC,SAASjB,MAAMkB,OACjDC,KAAMJ,OAAOH,EAAMI,cAAcC,SAASE,KAAKD,OAC/CE,OAAQL,OAAOH,EAAMI,cAAcC,SAASG,OAAOF,O,CArBrBG,CAAiBT,GAAzCU,EAAwBR,EAAxBd,MAAOmB,EAAiBL,EAAjBK,KAAMC,EAAWN,EAAXM,OAEZG,EAAW,EAAGA,GAAYH,EAAQG,GAAY,EACrDzB,EAAcyB,EAAUD,GACrBE,MAAK,SAAAC,G,IAAG1B,EAAQ0B,EAAR1B,SAAUC,EAAKyB,EAALzB,MACjBP,EAAAiC,OAAOC,QAAQ,uBAAwCC,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,M,IAE9D6B,OAAM,SAAAJ,G,IAAG1B,EAAQ0B,EAAR1B,SAAUC,EAAKyB,EAALzB,MAClBP,EAAAiC,OAAOI,QAAQ,sBAAqCF,OAAf7B,EAAS,QAAY6B,OAAN5B,EAAM,M,IAG9DsB,GAASH,EAETP,EAAMI,cAAce,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formEl = document.querySelector('.form');\n\nformEl.lastElementChild.classList.add('btn');\n\nformEl.addEventListener('submit', formSubmitHandler);\n\nfunction formSubmitHandler(event) {\n  event.preventDefault();\n\n  const { delay, step, amount } = formValuesPicker(event);\n\n  for (let position = 1; position <= amount; position += 1) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n\n    delay += step;\n\n    event.currentTarget.reset();\n  }\n}\n\nfunction formValuesPicker(event) {\n  const promiseObj = {\n    delay: Number(event.currentTarget.elements.delay.value),\n    step: Number(event.currentTarget.elements.step.value),\n    amount: Number(event.currentTarget.elements.amount.value)\n  };\n\n  return promiseObj;\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    const timeoutId = setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$formEl","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","lastElementChild","classList","add","addEventListener","event","preventDefault","ref","Number","currentTarget","elements","value","step","amount","$ce04d3a99e08e73b$var$formValuesPicker","delay1","position1","then","param","Notify","success","concat","catch","failure","reset"],"version":3,"file":"03-promises.29f87dba.js.map"}