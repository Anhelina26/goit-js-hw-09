{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAASC,SAASC,cAAc,SAEtCF,EAAOG,iBAAiBC,UAAUC,IAAI,OA4BtC,SAASC,EAAkBC,GAOzB,MANmB,CACjBC,MAAOC,OAAOF,EAAMG,cAAcC,SAASH,MAAMI,OACjDC,KAAMJ,OAAOF,EAAMG,cAAcC,SAASE,KAAKD,OAC/CE,OAAQL,OAAOF,EAAMG,cAAcC,SAASG,OAAOF,O,CAMvD,SAASG,EAAcC,EAAUR,GAC/B,OAAO,IAAIS,SAAQ,SAACC,EAASC,GAC7B,IAAMC,EAAgBC,KAAKC,SAAW,GAE1BC,YAAW,WACfH,EACJF,EAAS,CAAEF,WAAUR,UAErBW,EAAQ,CAAEH,WAAUR,S,GAChBA,E,IA3CVR,EAAOwB,iBAAiB,UAExB,SAA4BjB,GAC1BA,EAAMkB,iBAENnB,EAAiBC,GAIjB,IAFA,IAA8BmB,EAAApB,EAAiBC,GAAzCoB,EAAwBD,EAAxBlB,MAAOK,EAAiBa,EAAjBb,KAAMC,EAAWY,EAAXZ,OAEVc,EAAW,EAAGA,GAAYd,EAAQc,GAAY,EACrDb,EAAca,EAAUD,GACrBE,MAAK,SAAAC,G,IAAGd,EAAQc,EAARd,SAAUR,EAAKsB,EAALtB,MACjBV,EAAAiC,OAAOC,QAAQ,uBAAwCC,OAAfjB,EAAS,QAAYiB,OAANzB,EAAM,M,IAE9D0B,OAAM,SAAAJ,G,IAAGd,EAAQc,EAARd,SAAUR,EAAKsB,EAALtB,MACnBV,EAAAiC,OAAOI,QAAQ,sBAAqCF,OAAfjB,EAAS,QAAYiB,OAANzB,EAAM,M,IAG3DmB,GAASd,EAETN,EAAMG,cAAc0B,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formEl = document.querySelector('.form');\n\nformEl.lastElementChild.classList.add('btn');\n\nlet timeoutId = null;\n\nformEl.addEventListener('submit', formSubmitHandler);\n\nfunction formSubmitHandler (event) {\n  event.preventDefault();\n\n  formValuesPicker(event);\n\n  let { delay, step, amount } = formValuesPicker(event);\n\n  for (let position = 1; position <= amount; position += 1) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n       Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);      \n      }) \n\n      delay += step;\n\n      event.currentTarget.reset()\n  }     \n}\n\nfunction formValuesPicker (event) {\n  const promiseObj = {\n    delay: Number(event.currentTarget.elements.delay.value),\n    step: Number(event.currentTarget.elements.step.value),\n    amount: Number(event.currentTarget.elements.amount.value)\n  };\n\n  return promiseObj;\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n  const shouldResolve = Math.random() > 0.3;\n\n  timeoutId = setTimeout(() => {\n      if (shouldResolve) {\n      resolve ({ position, delay });\n      } else {\n      reject ({ position, delay });\n      }}, delay)        \n  }) \n}\n\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$formEl","document","querySelector","lastElementChild","classList","add","$ce04d3a99e08e73b$var$formValuesPicker","event","delay","Number","currentTarget","elements","value","step","amount","$ce04d3a99e08e73b$var$createPromise","position","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","preventDefault","ref","delay1","position1","then","param","Notify","success","concat","catch","failure","reset"],"version":3,"file":"03-promises.339d683a.js.map"}