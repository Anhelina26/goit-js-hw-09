{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAASC,SAASC,cAAc,SAoCtC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAEpBC,YAAW,KACvBH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CA5CbL,EAAOa,iBAAiBC,UAAUC,IAAI,OAEtCf,EAAOgB,iBAAiB,UAExB,SAA2BC,GACzBA,EAAMC,iBAEN,MAAQb,MAAAc,EAAKC,KAAEA,EAAIC,OAAEA,GAiBvB,SAA0BJ,GAOxB,MANmB,CACjBZ,MAAOiB,OAAOL,EAAMM,cAAcC,SAASnB,MAAMoB,OACjDL,KAAME,OAAOL,EAAMM,cAAcC,SAASJ,KAAKK,OAC/CJ,OAAQC,OAAOL,EAAMM,cAAcC,SAASH,OAAOI,O,CArBrBC,CAAiBT,GAEjD,IAAK,IAAIU,EAAW,EAAGA,GAAYN,EAAQM,GAAY,EACrDxB,EAAcwB,EAAUR,GACrBS,MAAK,EAACxB,SAAEA,EAAQC,MAAEA,MACjBP,EAAA+B,OAAOC,QAAQ,uBAAqB1B,QAAiBC,MAAU,IAEhE0B,OAAM,EAAC3B,SAAEA,EAAQC,MAAEA,MAClBP,EAAA+B,OAAOG,QAAQ,sBAAoB5B,QAAeC,MAAU,IAGhEc,GAASC,EAETH,EAAMM,cAAcU,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formEl = document.querySelector('.form');\n\nformEl.lastElementChild.classList.add('btn');\n\nformEl.addEventListener('submit', formSubmitHandler);\n\nfunction formSubmitHandler(event) {\n  event.preventDefault();\n\n  const { delay, step, amount } = formValuesPicker(event);\n\n  for (let position = 1; position <= amount; position += 1) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n\n    delay += step;\n\n    event.currentTarget.reset();\n  }\n}\n\nfunction formValuesPicker(event) {\n  const promiseObj = {\n    delay: Number(event.currentTarget.elements.delay.value),\n    step: Number(event.currentTarget.elements.step.value),\n    amount: Number(event.currentTarget.elements.amount.value)\n  };\n\n  return promiseObj;\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    const timeoutId = setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$formEl","document","querySelector","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","lastElementChild","classList","add","addEventListener","event","preventDefault","delay1","step","amount","Number","currentTarget","elements","value","$47d4ff9957288465$var$formValuesPicker","position1","then","Notify","success","catch","failure","reset"],"version":3,"file":"03-promises.7c5c7d46.js.map"}