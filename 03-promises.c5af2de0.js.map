{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAASC,SAASC,cAAc,SAEtCF,EAAOG,iBAAiBC,UAAUC,IAAI,OAEtC,IAAIC,EAAY,KA0BhB,SAASC,EAAkBC,GAOzB,MANmB,CACjBC,MAAOC,OAAOF,EAAMG,cAAcC,SAASH,MAAMI,OACjDC,KAAMJ,OAAOF,EAAMG,cAAcC,SAASE,KAAKD,OAC/CE,OAAQL,OAAOF,EAAMG,cAAcC,SAASG,OAAOF,O,CAMvD,SAASG,EAAcC,EAAUR,GAC/B,OAAO,IAAIS,SAAQ,CAACC,EAASC,KAC7B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCjB,EAAYkB,YAAW,KACfH,EACJF,EAAS,C,SAAEF,E,MAAUR,IAErBW,EAAQ,C,SAAEH,E,MAAUR,GAAQ,GACxBA,EAAM,G,CA3ChBT,EAAOyB,iBAAiB,UAExB,SAA4BjB,GAC1BA,EAAMkB,iBAENnB,EAAiBC,GAEjB,IAAMC,MAAAkB,EAAKb,KAAEA,EAAIC,OAAEA,GAAWR,EAAiBC,GAE/C,IAAK,IAAIoB,EAAW,EAAGA,GAAYb,EAAQa,GAAY,EACrDZ,EAAcY,EAAUD,GACrBE,MAAK,EAACZ,SAAEA,EAAQR,MAAEA,MACjBX,EAAAgC,OAAOC,QAAQ,uBAAqBd,QAAiBR,MAAU,IAEhEuB,OAAM,EAACf,SAAEA,EAAQR,MAAEA,MACnBX,EAAAgC,OAAOG,QAAQ,sBAAoBhB,QAAeR,MAAU,IAG7DkB,GAASb,EAETN,EAAMG,cAAcuB,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formEl = document.querySelector('.form');\n\nformEl.lastElementChild.classList.add('btn');\n\nlet timeoutId = null;\n\nformEl.addEventListener('submit', formSubmitHandler);\n\nfunction formSubmitHandler (event) {\n  event.preventDefault();\n\n  formValuesPicker(event);\n\n  let { delay, step, amount } = formValuesPicker(event);\n\n  for (let position = 1; position <= amount; position += 1) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n       Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);      \n      }) \n\n      delay += step;\n\n      event.currentTarget.reset()\n  }     \n}\n\nfunction formValuesPicker (event) {\n  const promiseObj = {\n    delay: Number(event.currentTarget.elements.delay.value),\n    step: Number(event.currentTarget.elements.step.value),\n    amount: Number(event.currentTarget.elements.amount.value)\n  };\n\n  return promiseObj;\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n  const shouldResolve = Math.random() > 0.3;\n\n  timeoutId = setTimeout(() => {\n      if (shouldResolve) {\n      resolve ({ position, delay });\n      } else {\n      reject ({ position, delay });\n      }}, delay)        \n  }) \n}\n\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$formEl","document","querySelector","lastElementChild","classList","add","$47d4ff9957288465$var$timeoutId","$47d4ff9957288465$var$formValuesPicker","event","delay","Number","currentTarget","elements","value","step","amount","$47d4ff9957288465$var$createPromise","position","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","preventDefault","delay1","position1","then","Notify","success","catch","failure","reset"],"version":3,"file":"03-promises.c5af2de0.js.map"}